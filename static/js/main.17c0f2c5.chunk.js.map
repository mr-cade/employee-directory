{"version":3,"sources":["components/Employee.js","utils/API.js","components/ResultList.js","App.js","serviceWorker.js","index.js"],"names":["Employee","className","axios","get","ResultList","props","class","scope","App","useState","setUsers","useEffect","API","then","res","users","data","results","map","user","console","log","login","username","name","first","image","picture","medium","email","basename","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uTAEe,SAASA,IACpB,OACI,yBAAKC,UAAU,QACX,0C,6BCAG,EACC,WACR,OAAOC,IAAMC,IALL,0C,OCiCDC,MA7Bf,SAAoBC,GAClB,OACE,2BAAOC,MAAM,SACX,+BACE,4BACE,6BACA,oCACA,wCACA,uCAGJ,+BACE,4BACE,wBAAIC,MAAM,OAAV,cACA,qCACA,yCACA,gDAEF,4BACA,wBAAIA,MAAM,OAAV,eACE,qCACA,yCACA,mDC+BV,IAEeC,EAtDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACCC,GADD,WAwBb,OArBAC,qBAAU,WAKRC,IAAiBC,MAAK,SAAAC,GACpB,IACIC,EADYD,EAAIE,KAAKC,QACLC,KAAI,SAAAC,GAEtB,OADAC,QAAQC,IAAIF,EAAKG,MAAMC,UAChB,CACLD,MAAOH,EAAKG,MAAMC,SAClBC,KAAML,EAAKK,KAAKC,MAChBC,MAAOP,EAAKQ,QAAQC,OACpBC,MAAOV,EAAKU,UAGhBnB,EAASK,GACTK,QAAQC,IAAIN,QAfb,IAoBD,yBAAKd,UAAU,OACb,4BAAQA,UAAU,cAChB,6CACA,kBAAC,IAAD,CAAY6B,SAAS,OAgBvB,8BACE,kBAAC9B,EAAD,MACA,kBAAC,EAAD,SCzCY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.17c0f2c5.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Employee() {\n    return (        \n        <div className=\"card\">\n            <h1>Directory</h1>            \n        </div>\n    )\n}\n","import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=11\";\n\n// Export an object with a \nexport default {\n    fetchUsers: function () {\n        return axios.get(BASEURL)\n            // .then(res => {\n            //     const results = res.data.results;\n            //     console.log(\"res.data: \", results)\n            //     return results.map(user => {\n            //         console.log(user.login.username)\n            //         return {\n            //             login: user.login.username,\n            //             name: user.name.first,\n            //             image: user.picture.medium,\n            //             email: user.email\n            //         };      \n            //     });\n            // }).catch(err => {\n            //     console.log(err)\n            // }), [];\n    }\n};\n","import userEvent from \"@testing-library/user-event\";\nimport React from \"react\";\nimport API from \"../utils/API\"\nimport \"./table.css\"\n// import res from \"../utils/seed.json\"\n\nfunction ResultList(props) {\n  return (\n    <table class=\"table\">\n      <thead>\n        <tr>\n          <th></th>\n          <th>Name</th>\n          <th>Username</th>\n          <th>email</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td scope=\"row\">Image Here</td>\n          <td>Name1</td>\n          <td>Username1</td>\n          <td>email1@test.com</td>\n        </tr>\n        <tr>\n        <td scope=\"row\">Image2 Here</td>\n          <td>Name2</td>\n          <td>Username2</td>\n          <td>email2@test.com</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nexport default ResultList;","import React, { Component, useEffect, useState } from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport Employee from './components/Employee.js'\nimport ResultList from './components/ResultList';\nimport API from './utils/API'\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  // When the component mounts, a call will be made to get random users.\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  function loadUsers() {\n    API.fetchUsers().then(res => {\n      const results = res.data.results;\n      let users = results.map(user => {\n        console.log(user.login.username)\n        return {\n          login: user.login.username,\n          name: user.name.first,\n          image: user.picture.medium,\n          email: user.email\n        };\n      });\n      setUsers(users)\n      console.log(users)\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>OMISS Members</h2>\n        <HashRouter basename='/'>\n          \n          {/* PAGE LINKS HERE for hashrouter (NOT NEEDED?)++++++++++++++++++++++++++++++++++++++++++++++++++ */}\n          {/* <div className=\"nav\">\n            <ul>\n              <li><Link to=\"/\">Home</Link></li>\n              <li><Link to=\"/about\">About</Link></li>\n            </ul>\n            <hr />\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={About} />\n          </div> */}\n          {/* PAGE LINKS HERE for hashrouter (NOT NEEDED?)++++++++++++++++++++++++++++++++++++++++++++++++++ */}\n\n        </HashRouter>\n      </header>\n      <body>\n        <Employee />\n        <ResultList />\n        {/* <ResultList login={users.login.username} /> */}\n      </body>\n    </div>\n  );\n}\nconst Home = () => <div><p></p></div>\nconst About = () => <div><p></p></div>\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}