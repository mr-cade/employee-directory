{"version":3,"sources":["components/Employee.js","components/ResultList.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Employee","className","ResultList","props","userMap","users","map","el","scope","alt","src","image","fName","lName","login","email","type","axios","get","App","useState","setUsers","useEffect","API","then","res","data","results","user","username","name","first","last","picture","thumbnail","basename","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4SAEe,SAASA,IACpB,OACI,yBAAKC,UAAU,QACX,0C,MC6CGC,MA/Cf,SAAoBC,GAClB,IAAMC,EAAUD,EAAME,MAAMC,KAAI,SAAAC,GAC9B,OACE,4BACI,wBAAIC,MAAM,OAAM,yBAAKC,IAAI,UAAUC,IAAKH,EAAGI,SAC3C,4BAAKJ,EAAGK,MAAR,IAAgBL,EAAGM,OACnB,4BAAKN,EAAGO,OACR,4BAAKP,EAAGQ,WAKhB,OACE,2BAAOd,UAAU,SACf,+BACE,4BACE,4BACE,4BAAQe,KAAK,UAAb,UAIF,4BACE,4BAAQA,KAAK,UAAb,SAIF,4BACE,4BAAQA,KAAK,UAAb,aAIF,4BACE,4BAAQA,KAAK,UAAb,YAMN,+BAEGZ,K,iBCtCM,EACC,WACR,OAAOa,IAAMC,IALL,2CCuDhB,IAEeC,EApDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNf,EADM,KACCgB,EADD,KAuBb,OApBAC,qBAAU,WAKRC,IAAiBC,MAAK,SAAAC,GACpB,IACIpB,EADYoB,EAAIC,KAAKC,QACLrB,KAAI,SAAAsB,GACtB,MAAO,CACLd,MAAOc,EAAKd,MAAMe,SAClBjB,MAAOgB,EAAKE,KAAKC,MACjBlB,MAAOe,EAAKE,KAAKE,KACjBrB,MAAOiB,EAAKK,QAAQC,UACpBnB,MAAOa,EAAKb,UAGhBM,EAAShB,QAdV,IAmBD,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAChB,6CACA,kBAAC,IAAD,CAAYkC,SAAS,OAgBvB,8BACE,kBAACnC,EAAD,MACA,kBAAC,EAAD,CAAYK,MAAOA,OCxCP+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c21eb5c7.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Employee() {\n    return (        \n        <div className=\"card\">\n            <h1>Directory</h1>            \n        </div>\n    )\n}\n","import React from \"react\";\nimport \"./table.css\"\n\nfunction ResultList(props) {\n  const userMap = props.users.map(el => {\n    return (\n      <tr>\n          <td scope=\"row\"><img alt=\"profile\" src={el.image}></img></td>\n          <td>{el.fName} {el.lName}</td>\n          <td>{el.login}</td>\n          <td>{el.email}</td>\n        </tr>\n    )\n  })\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th>\n            <button type=\"button\">\n            Photo\n            </button>\n          </th>\n          <th>\n            <button type=\"button\">\n            Name\n            </button>\n          </th>\n          <th>\n            <button type=\"button\">\n            Username\n            </button>\n          </th>\n          <th>\n            <button type=\"button\">\n            email\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {/* . TABLE ARRAY OF USERS INSERTED HERE */}\n        {userMap}\n        {/* ^ TABLE ARRAY OF USERS INSERTED HERE */}\n      </tbody>\n    </table>\n  );\n}\n\nexport default ResultList;","import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=100\";\n\n// Export an object with a \nexport default {\n    fetchUsers: function () {\n        return axios.get(BASEURL)\n            // .then(res => {\n            //     const results = res.data.results;\n            //     console.log(\"res.data: \", results)\n            //     return results.map(user => {\n            //         console.log(user.login.username)\n            //         return {\n            //             login: user.login.username,\n            //             name: user.name.first,\n            //             image: user.picture.medium,\n            //             email: user.email\n            //         };      \n            //     });\n            // }).catch(err => {\n            //     console.log(err)\n            // }), [];\n    }\n};\n","import React, { Component, useEffect, useState } from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport Employee from './components/Employee.js'\nimport ResultList from './components/ResultList';\nimport API from './utils/API'\n\nfunction App() {\n  const [users, setUsers] = useState([]);\n  // When the component mounts, a call will be made to get random users.\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  function loadUsers() {\n    API.fetchUsers().then(res => {\n      const results = res.data.results;\n      let users = results.map(user => {\n        return {\n          login: user.login.username,\n          fName: user.name.first,\n          lName: user.name.last,\n          image: user.picture.thumbnail,\n          email: user.email\n        };\n      });\n      setUsers(users)\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>OMISS Members</h2>\n        <HashRouter basename='/'>\n\n          {/* PAGE LINKS HERE for hashrouter (NOT NEEDED?)++++++++++++++++++++++++++++++++++++++++++++++++++ */}\n          {/* <div className=\"nav\">\n            <ul>\n              <li><Link to=\"/\">Home</Link></li>\n              <li><Link to=\"/about\">About</Link></li>\n            </ul>\n            <hr />\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/about\" component={About} />\n          </div> */}\n          {/* PAGE LINKS HERE for hashrouter (NOT NEEDED?)++++++++++++++++++++++++++++++++++++++++++++++++++ */}\n\n        </HashRouter>\n      </header>\n      <main>\n        <Employee />\n        <ResultList users={users}/>\n      </main>\n    </div>\n  );\n}\nconst Home = () => <div><p></p></div>\nconst About = () => <div><p></p></div>\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}